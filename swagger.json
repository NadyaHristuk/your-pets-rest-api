{
    "openapi": "3.0.1",
    "info": {
        "version": "1.1.0",
        "title": "Your-pets API docs",
        "description": "API documentation for Your pets progect"
    },
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "servers": [
        { "url": "http://localhost:3001" },
        { "url": "https://your-pets-rest-api.onrender.com" }
    ],
    "tags": [
        {
            "name": "Auth",
            "description": "Authorization endpoints"
        },
        {
            "name": "Notices",
            "description": "Notices endpoints"
        },
        {
            "name": "Pets",
            "description": "Pets endpoints"
        }
    ],
    "paths": {
        "/users/register": {
            "post": {
                "tags": ["Auth"],
                "summary": "User registration",
                "parameters": [],
                "requestBody": {
                    "description": "<b>DESCRIPTION OF QUERY PARAMETERS:</b><br> <br><b>*email</b> - string, the user's email address.  Pattern: /^([a-z0-9_-]+.) *[a-z0-9_-]+@[a-z0-9_-]+(.[ a-z0-9_-]+)*. [a-z] {2,6}$/ <br> <br> <b>*password</b> - string, user password. Must contain min 6, max 16  at least 1 uppercase letter, 1 lowercase letter, and 1 number <br>Pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*d).*$/<br><br><b>All fields are required!</b>",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegistrationLoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The user is registered successfully<br><br><b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><b>token</b> - string, the user's token<br> <b>email</b> - string, the user's email address in object <b>user</b>.<br><br> ",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegistrationLoginResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "BadRequest<br> <br><b>If the mail is not valid</b>:  This email is not valide<br> <b>If the password is not valid</b>:   Password must contain at least 1 uppercase letter, 1 lowercase letter, and 1 number <b> or </b> password length must be at least 6 characters long and less than or equal to 16 characters long",
                        "content": {}
                    },
                    "409": {
                        "description": "Conflict<br> <br>Email in use",
                        "content": {}
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "tags": ["Auth"],
                "summary": "User authentication",
                "parameters": [],
                "requestBody": {
                    "description": "<b>DESCRIPTION OF QUERY PARAMETERS:</b><br> <br><b>*email</b> - string, the user's email address.  Pattern: /^([a-z0-9_-]+.) *[a-z0-9_-]+@[a-z0-9_-]+(.[ a-z0-9_-]+)*. [a-z] {2,6}$/ <br> <br> <b>*password</b> - string, user password. Must contain min 6, max 16  at least 1 uppercase letter, 1 lowercase letter, and 1 number <br>Pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*d).*$/<br><br><b>All fields are required!</b>",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegistrationLoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The user is logined successfully<br><br><b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><b>token</b> - string, the user's token<br> <b>email</b> - string, the user's email address in object <b>user</b>.<br><br> ",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegistrationLoginResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<b>BadRequest:</b> <br><b>If the mail is not valid</b>:  This email is not valide<br> <b>If the password is not valid</b>:   Password must contain at least 1 uppercase letter, 1 lowercase letter, and 1 number <b> or </b> password length must be at least 6 characters long and less than or equal to 16 characters long",
                        "content": {}
                    },
                    "401": {
                        "description": "Email or password is wrong",
                        "content": {}
                    }
                }
            }
        },
        "/users/logout": {
            "post": {
                "tags": ["Auth"],
                "summary": "User log out",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [{
                    "in": "header",
                    "required": true,
                    "name": "Authorization",
                    "description": "The token issued to the current user.",
                    "schema": {
                        "type": "string"
                    }
                }],
                "responses": {
                    "204": {
                        "description": "User successfully logged out",
                        "content": {}
                    },
                    "401": {
                        "description": "Not authorized",
                        "content": {}
                    }
                }
            }
        },
        "/users": {
            "patch": {
                "tags": ["Auth"],
                "summary": "Update user info",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [],
                "requestBody": {
                    "description": "<b>DESCRIPTION OF QUERY PARAMETERS:</b><br><br> <b>phone</b> - string, user phone number. Can contain: any number, plus symbol, opening and closing bracket symbols, hyphen (minus) character, space character. <br><br><b>name</b> - string, the user's name. Must contain min 2, max 16. It can contain only Latin and Cyrillic letters, the apostrophe symbol, spaces and hyphens. <br>pattern /^[a-zA-Zа-яА-Я' -]+$/</b><br><br><b>email</b> - string, the user's email address.  Pattern: /^([a-z0-9_-]+.) *[a-z0-9_-]+@[a-z0-9_-]+(.[ a-z0-9_-]+)*. [a-z] {2,6}$/ <br><br> <b>birthday</b> - date, the user's birthday. max date - now, example format: 1980-04-15T00:00:00.000Z</b><br><br><b>city</b> - string, user city. Must contain min 2, max 100. It can contain only Latin and Cyrillic letters, as well as separators in the form of a space or hyphen. At the same time, it does not allow a delimiter string to begin or end and does not allow the use of two delimiters in a row. <br>Pattern: /^[a-zA-Zа-яА-Я]+(?:[s-][a-zA-Zа-яА-Я]+)*$/<br><br><b>You can pass any of the fields!</b>",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The data was updated successfully <br><br><b>DESCRIPTION OF RESPONSE PARAMETERS:</b><br><br> <b>_id</b> - string, user _id <br><br> <b>phone</b> - string, user phone number. Can contain: any number, plus symbol, opening and closing bracket symbols, hyphen (minus) character, space character. <br><br><b>name</b> - string, the user's name. Must contain min 2, max 16. It can contain only Latin and Cyrillic letters, the apostrophe symbol, spaces and hyphens. <br>pattern /^[a-zA-Zа-яА-Я' -]+$/</b><br><br><b>email</b> - string, the user's email address.  Pattern: /^([a-z0-9_-]+.) *[a-z0-9_-]+@[a-z0-9_-]+(.[ a-z0-9_-]+)*. [a-z] {2,6}$/ <br><br> <b>birthday</b> - date, the user's birthday. max date - now, example format: 1980-04-15T00:00:00.000Z</b><br><br><b>city</b> - string, user city. Must contain min 2, max 100. It can contain only Latin and Cyrillic letters, as well as separators in the form of a space or hyphen. At the same time, it does not allow a delimiter string to begin or end and does not allow the use of two delimiters in a row. <br>Pattern: /^[a-zA-Zа-яА-Я]+(?:[s-][a-zA-Zа-яА-Я]+)*$/<br><br><b>You can pass any of the fields!</b>",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized",
                        "content": {}
                    },
                    "404": {
                        "description": "Not found",
                        "content": {}
                    }
                }
            }
        },
        "users/avatars": {
            "patch": {
                "tags": ["Auth"],
                "summary": "Update user's avatar",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [],
                "requestBody": {
                    "description": "<b>DESCRIPTION OF QUERY PARAMETERS:</b><br><br> <b>avatar</b> - the user's avatar is a photo <b>file</b> no larger than 3Mb",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "avatar": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Select a JPEG or PNG image file."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The logout operation was successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "avatarURL": {
                                            "type": "string",
                                            "description": "The URL of the updated avatar image",
                                            "example": "avatars\\645e819f374fda194a78304b_DSC_7267.JPG"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Not authorized",
                        "content": {}
                    },
                    "500": {
                        "description": "Failed to resize image",
                        "content": {}
                    }
                }
            }
        },
        "/notices/search/{category}": {
            "get": {
                "tags": ["Notices"],
                "summary": "Search for notices by category and title",
                "parameters": [
                    {
                        "in": "path",
                        "name": "category",
                        "description": "The category to search for notices",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["sell", "in-good-hands", "lost-found"]
                        }
                    },
                    {
                        "in": "query",
                        "name": "searchWords ",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "Title of the notice",
                        "example": "my"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoticesArrayResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "There are no notices for this request",
                        "content": {}
                    }
                }
            }
        },
        "/notices/category/{category}": {
            "get": {
                "tags": ["Notices"],
                "summary": "Search for notices by category",
                "parameters": [
                    {
                        "in": "path",
                        "name": "category",
                        "description": "The category to search for notices",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["sell", "in-good-hands", "lost-found"]
                        },
                        "example": "in good hands"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoticesArrayResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "There are no notices for this request",
                        "content": {}
                    }
                }
            }
        },
        "/notices/notice/{noticeId}": {
            "get": {
                "tags": ["Notices"],
                "summary": "Get notice by id",
                "parameters": [
                    {
                        "in": "path",
                        "name": "noticeId",
                        "description": "Notice id",
                        "required": true,
                        "type": "string",
                        "example": "645cd2bb1915ca1c3dd740ba"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoticesByIdResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Notice not found",
                        "content": {}
                    }
                }
            }
        },
        "/notices/favorites/{noticeId}": {
            "post": {
                "tags": ["Notices"],
                "summary": "Add notice to favorites  by id",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "noticeId",
                        "description": "Notice id",
                        "required": true,
                        "type": "string",
                        "example": "645cd2bb1915ca1c3dd740ba"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoticesArrayResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "content": {}
                    },
                    "404": {
                        "description": "User  not found",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": ["Notices"],
                "summary": "Remove favorite notice by User",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "noticeId",
                        "description": "Notice id",
                        "required": true,
                        "type": "string",
                        "example": "645cd2bb1915ca1c3dd740ba"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notice deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoticesByIdResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "content": {}
                    },
                    "404": {
                        "description": "User  not found",
                        "content": {}
                    }
                }
            }
        },
        "/notices/favorites": {
            "get": {
                "tags": ["Notices"],
                "summary": "Get favorites notices by User ",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoticesArrayResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "content": {}
                    }
                }
            }
        },
        "/notices/user-notices/{category}": {
            "post": {
                "tags": ["Notices"],
                "summary": "Create User notice by category",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "category",
                        "description": "The category to create for notices",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "enum": ["sell", "in-good-hands", "lost-found"]
                        },
                        "example": "in good hands"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoticesByIdResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "content": {}
                    },
                    "404": {
                        "description": "There are no notices for this request",
                        "content": {}
                    }
                }
            }
        },
        "/notices/user-notices": {
            "get": {
                "tags": ["Notices"],
                "summary": "Get User notices",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "page ",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 1
                        },
                        "description": "Requested page number"
                    },
                    {
                        "in": "query",
                        "name": "limit ",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 12
                        },
                        "description": "Number of notices per page"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoticesArrayResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "content": {}
                    },
                    "404": {
                        "description": "Not found",
                        "content": {}
                    }
                }
            }
        },
        "/notices/user-notices/{noticeId}": {
            "delete": {
                "tags": ["Notices"],
                "summary": "remove User notice by id",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "noticeId",
                        "description": "Notice id",
                        "required": true,
                        "type": "string",
                        "example": "645cd2bb1915ca1c3dd740ba"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful notice removal",
                        "content": {}
                    },
                    "401": {
                        "description": "User not authorized",
                        "content": {}
                    },
                    "404": {
                        "description": "Not found",
                        "content": {}
                    }
                }
            }
        },

        "/pets": {
            "post": {
                "tags": ["Pets"],
                "summary": "Add a new pet",
                "parameters": [],
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "description": "Create a new pet",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Pet added successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PetResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "User not authorized",
                        "content": {}
                    }
                }
            }
        },
        "/pets/{petId}": {
            "delete": {
                "tags": ["Pets"],
                "summary": "Delete pet",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "petId",
                        "description": "pet id",
                        "type": "string",
                        "example": "645cd2bb1915ca1c3dd740bc",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The pet was successfully deleted"
                    },
                    "401": {
                        "description": "User not authorized",
                        "content": {}
                    },
                    "404": {
                        "description": "Pet not found",
                        "content": {}
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "RegistrationLoginRequest": {
                "type": "object",
                "required": ["email", "password"],
                "properties": {
                    "email": {
                        "type": "string",
                        "pattern": "/^([a-z0-9_-]+.) *[a-z0-9_-]+@[a-z0-9_-]+(.[ a-z0-9_-]+)*. [a-z] {2,6}$/",
                        "description": "User's email",
                        "format": "email"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password",
                        "minLength": 6,
                        "maxLength": 16,
                        "pattern": "/^(?=.*[a-z])(?=.*[A-Z])(?=.*d).*$/",
                        "example": "Qwert123"
                    }
                }
            },
            "RegistrationLoginResponse": {
                "type": "object",
                "required": ["user", "token"],
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "User's token",
                        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0NWRlMTIzNTVlNWM4MDM0ODQ0Y2Q0MCIsImlhdCI6MTY4Mzg3NzgyNywiZXhwIjoxNjgzOTQyNjI3fQ.Cl7kfx9Tm-125ffgMKQGOzR9WhTH_dYET1B75hFjZyk"
                    },
                    "user": {
                        "type": "object",
                        "required": ["email"],
                        "properties": {
                            "email": {
                                "type": "string",
                                "description": "User's email",
                                "format": "email"
                            }
                        }
                    }
                }
            },
            "UserRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Helen",
                        "description": "Username"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "User email"
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date",
                        "example": "1980-04-15T00:00:00.000Z",
                        "description": "User birthday"
                    },
                    "phone": {
                        "type": "string",
                        "example": "+380678884455",
                        "description": "User phone number"
                    },
                    "city": {
                        "type": "string",
                        "example": "Lviv",
                        "description": "User's city of residence"
                    }
                }
            },
            "UserResponse": {
                "type": "object",
                "required": ["_id", "email", "avatarURL", "favorite", "city","birthday","name","phone"],
                "properties": {
                    "_id": {
                        "type": "string",
                        "example": "645e819f374fda194a78304b",
                        "description": "User id"
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "User email"
                    },
                    "avatarURL": {
                        "type": "string",
                        "example": "https://example.com",
                        "description": "User's avatar URL"
                    },
                    "favorite": {
                        "type": "array",
                        "items": {}
                    },
                    "city": {
                        "type": "string",
                        "example": "Lviv",
                        "description": "User's city of residence"
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date",
                        "example": "1980-04-15T00:00:00.000Z",
                        "description": "User birthday"
                    },
                    "name": {
                        "type": "string",
                        "example": "Helen",
                        "description": "Username"
                    },
                    "phone": {
                        "type": "string",
                        "example": "+380678884455",
                        "description": "User phone number"
                    }
                }
            },
            "NoticesArrayResponse": {
                "type": "array",
                "items": {
                    "type": "object",
                    "required": [
                        "title",
                        "category",
                        "name",
                        "birthday",
                        "breed",
                        "place",
                        "sex",
                        "photoURL",
                        "comments",
                        "owner"
                    ],
                    "properties": {
                        "title": {
                            "type": "string",
                            "description": "notice title",
                            "example": "Colorful Parrot for Your Home"
                        },
                        "category": {
                            "type": "string",
                            "enum": ["sell", "in-good-hands", "lost-found"],
                            "description": "Category for notice"
                        },
                        "price": {
                            "type": "string",
                            "example": "1500$",
                            "description": "'Price must be higher than 0'"
                        },
                        "name": {
                            "type": "string",
                            "description": "Pet name",
                            "example": "Dana"
                        },
                        "birthday": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "breed": {
                            "type": "string",
                            "description": "Pet breed",
                            "example": "Bichon"
                        },
                        "place": {
                            "type": "string",
                            "description": "Set place",
                            "example": "Odesa"
                        },
                        "sex": {
                            "type": "string",
                            "enum": ["male", "female"],
                            "description": "pet gender"
                        },
                        "comments": {
                            "type": "string",
                            "example": "Cute dogy"
                        },
                        "owner": {
                            "type": "string",
                            "example": "645cd2bb1915ca1c3dd740bc"
                        },
                        "favorite": {
                            "type": "array",
                            "description": "Array notice id",
                            "example": [
                                "611c1f57db916b209acdd1a1",
                                "611c1f57db916b209acdd1a2"
                            ],
                            "items": {
                                "type": "string",
                                "example": "611c1f57db916b209acdd1a1"
                            }
                        },
                        "photoURL": {
                            "type": "string",
                            "description": "URL to pet's avatar image",
                            "example": "https://example.com/photo.jpg"
                        }
                    }
                }
            },
            "NoticesByIdResponse": {
                "type": "object",
                "required": [
                    "title",
                    "category",
                    "name",
                    "birthday",
                    "breed",
                    "place",
                    "sex",
                    "photoURL",
                    "comments"
                ],
                "properties": {
                    "title": {
                        "type": "string",
                        "description": "notice title",
                        "example": "Colorful Parrot for Your Home"
                    },
                    "category": {
                        "type": "string",
                        "enum": ["sell", "in-good-hands", "lost-found"],
                        "description": "Category for notice"
                    },
                    "price": {
                        "type": "string",
                        "example": "1500$",
                        "description": "'Price must be higher than 0'"
                    },
                    "name": {
                        "type": "string",
                        "description": "Pet name",
                        "example": "Dana"
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "breed": {
                        "type": "string",
                        "description": "Pet breed",
                        "example": "Bichon"
                    },
                    "place": {
                        "type": "string",
                        "description": "Set place",
                        "example": "Odesa"
                    },
                    "sex": {
                        "type": "string",
                        "enum": ["male", "female"],
                        "description": "pet gender"
                    },
                    "comments": {
                        "type": "string",
                        "example": "Cute dogy"
                    },
                    "_id": {
                        "type": "string",
                        "example": "645cd2bb1915ca1c3dd740bc"
                    },
                    "favorite": {
                        "type": "array",
                        "description": "Array notice id",
                        "example": [
                            "611c1f57db916b209acdd1a1",
                            "611c1f57db916b209acdd1a2"
                        ],
                        "items": {
                            "type": "string",
                            "example": "611c1f57db916b209acdd1a1"
                        }
                    },
                    "photoURL": {
                        "type": "string",
                        "description": "URL to pet's avatar image",
                        "example": "https://example.com/photo.jpg"
                    }
                }
            },
            "PetRequest": {
                "type": "object",
                "required": ["name", "birthday"],
                "properties": {
                    "name": {
                        "type": "string",
                        "example": "Dana",
                        "description": "Pet name"
                    },
                    "comments": {
                        "type": "string",
                        "example": "Cute dogy",
                        "description": "comments"
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date",
                        "description": "Pet birthday"
                    },
                    "breed": {
                        "type": "string",
                        "example": "Bichon",
                        "description": "Pet's breed"
                    },
                    "photoURL": {
                        "type": "string",
                        "example": "https://example.com",
                        "description": "Pet photo URL"
                    }
                }
            },
            "PetResponse": {
                "type": "object",
                "required": ["name", "birthday", "_id"],
                "properties": {
                    "_id": {
                        "type": "string",
                        "example": "645cd2bb1915ca1c3dd740bc",
                        "description": "Pet id"
                    },
                    "name": {
                        "type": "string",
                        "example": "Helen",
                        "description": "Pet name"
                    },
                    "comments": {
                        "type": "string",
                        "example": "Cute dogy",
                        "description": "comments"
                    },
                    "birthday": {
                        "type": "string",
                        "format": "date",
                        "description": "Pet birthday"
                    },
                    "breed": {
                        "type": "string",
                        "example": "Bichon",
                        "description": "Pet's breed"
                    },
                    "photoURL": {
                        "type": "string",
                        "example": "https://example.com",
                        "description": "Pet photo URL"
                    }
                }
            }
        },
        "securitySchemes": {
            "Bearer": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}
